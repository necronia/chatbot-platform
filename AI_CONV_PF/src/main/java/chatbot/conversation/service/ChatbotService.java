/**
 * This is automatically generated by sprout plug-in.
 */
package chatbot.conversation.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.google.gson.internal.LinkedTreeMap;

import chatbot.conversation.dao.ChatbotDAO;
import chatbot.platform.util.ConvModelWrapper;
import chatbot.platform.util.ConvUtil;

/**
 * 
 * @since TODO
 * @author Administrator
 */
@Service("ChatbotService")
public class ChatbotService {

	private Logger logger = LoggerFactory.getLogger(this.getClass());

	@Value("${host.full.address}")
	private String HOST;

	@Autowired
	ChatbotDAO chatbotDAO;
	
	
	public ArrayList checkSection(String userId){
		return  chatbotDAO.checkConvSection(userId);
	}
	
	public ConvModelWrapper sendText(ConvModelWrapper conv , String section) throws Exception {
		if (logger.isInfoEnabled()) {
			logger.info("★★★★★★★★★★★★ In sendText Service.....");
		}		
    	
		Map<String, Object> paraMap = new HashMap<String, Object>();
		// aibril 통신
		conv = ConvUtil.sendText(conv, chatbotDAO);
		
		paraMap.put("question",  conv.getInputText());
		paraMap.put("answer",  conv.getOutputText());
		paraMap.put("context",  conv.getContextString());
		paraMap.put("section",  section);
		paraMap.put("userId", "x0007926");
		
		chatbotDAO.insertConvInfo(paraMap);


		// 데이터를 만들어서 Dialog에 전달해야 하는 경우 start
		// context = 대화의 흐름에 필요한 data들이 담겨있음
		// workspace가 업무 영역일때 동작
/*		if (!conv.getWorkspace().equals(ConvUtil.CONVERSATION_WORKSPACE_COMMON)) {

			// conv = ConvUtil.sendText(conv.getInputText(),
			// conv.getContextString());
		} else { // workspace가 공통 영역이지만 data를 만들어서 던져야 할 때 동작
			// 날씨
			if (conv.getIntentSize() > 0 && ("weather".equals(conv.getIntent(0)) || "N".equals(conv.getCustomContext("weatherEntityYn")))) {
				makeWeatherResult(conv, chatbotDAO);
				conv = ConvUtil.sendText(conv, chatbotDAO);

			// 점심메뉴
			} else if (conv.getIntentSize() > 0 && "lunchmenu".equals(conv.getIntent(0))) {
				makeLunchmenuResult(conv);
				conv = ConvUtil.sendText(conv, chatbotDAO);
			}
		}*/
		// 데이터를 만들어서 전달해야하는경우 end

		return conv;
	}

	// 업무영역 결과 data 만들기
	@SuppressWarnings("rawtypes")
	public LinkedTreeMap makeTaskResult(Map totalMap, LinkedTreeMap contextMap, ChatbotDAO chatPlatformDAO) {
		return contextMap;
	}

	// 공통영역 -> 메뉴검색 data 만들기
	@SuppressWarnings({ })
	public void makeLunchmenuResult(ConvModelWrapper conv) {
		String lunchDt = "오늘";
		String lunchLoc = "";
		String lunchType = "점심";
		String lunchTime = "2";
		String today = new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date());
		String lunchDate = today;
		Integer[] textLoc = new Integer[2];
		for (int i = 0; i < conv.getEntitySize(); i++) {
			String val = conv.getEntityValue(i);
			String entity = conv.getEntity(i);
			if ("lunchLoc".equals(entity))
				lunchLoc = val;
			if ("lunchType".equals(entity))
				lunchType = val;
			if ("lunchTime".equals(entity)) {
				lunchType = val;
				switch (val) {
				case "아침":
					lunchTime = "1";
					break;
				case "점심":
					lunchTime = "2";
					break;
				case "저녁":
					lunchTime = "3";
					break;
				case "야식":
					lunchTime = "4";
					break;
				}
			}
			if ("sys-date".equals(entity)) {
				lunchDate = val;
				textLoc[0] = (int) Math.round(conv.getEntityLocation(i, 0));
				textLoc[1] = (int) Math.round(conv.getEntityLocation(i, 1));
			}
		}
		if (!lunchDate.equals(today)) {
			lunchDt = conv.getInputText().substring(textLoc[0], textLoc[1]);
		}

		String lunchBody = "<script>window.open(\"/resources/imagePop/lunchMenu.jsp?date=" + lunchDate + "&type="
				+ lunchTime + "\", \"lunchPop\" , \"scrollbars=yes, width=770, height =720\");</script>";

		Map<String, Object> customContext = new HashMap<String, Object>();
		customContext.put("lunchDt", lunchDt.replace(" 점심", ""));
		customContext.put("lunchLoc", lunchLoc);
		customContext.put("lunchType", lunchType);
		customContext.put("lunchBody", lunchBody);
		
		conv.setCustomContext(customContext);
	}

	// 공통영역 -> 날씨검색 data 만들기
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void makeWeatherResult(ConvModelWrapper conv, ChatbotDAO chatPlatformDAO) {
		String cityType1 = "";
		String cityType2 = "";
		String cityType3 = "";
		for (int i = 0; i < conv.getEntitySize(); i++) {
			String val = conv.getEntityValue(i);
			String entity = conv.getEntity(i);
			if ("Weather_type1".equals(entity)) {
				if (val.length() > cityType1.length())
					cityType1 = val; // 엔터티 복수 검색시 length가 긴 지명
			}
			if ("Weather_type2".equals(entity)) {
				if (val.length() > cityType2.length())
					cityType2 = val;// 엔터티 복수 검색시 length가 긴 지명
			}
			if ("Weather_type3".equals(entity)) {
				if (cityType2.equals(val)) {// type2의 지명이 type3에도 있을때 (ex 서구)

				} else {
					if (val.length() > cityType3.length())
						cityType3 = val;// 엔터티 복수 검색시 length가 긴 지명
				}
			}
		}
		HashMap pMap = new HashMap();
		Map<String, Object> customContext = new HashMap();

		if (conv.getEntitySize() > 0) {
			if (!"".equals(cityType1))
				pMap.put("cityType1", cityType1);
			if (!"".equals(cityType2))
				pMap.put("cityType2", cityType2);
			if (!"".equals(cityType3))
				pMap.put("cityType3", cityType3);

			String weatherCode = chatPlatformDAO.getWeatherCode(pMap);
			String weatherBody = "http://weather.naver.com/rgn/townWetr.nhn?naverRgnCd=" + weatherCode;
			String questionBody = "";
			boolean dataYn = true;

			if (!"".equals(cityType1)) {
				questionBody = cityType1 + "의 ";
				if ("".equals(cityType2)) {
					if ("".equals(cityType3)) {
						questionBody += "날씨는";
					} else {
						questionBody += cityType3 + "의 날씨는";
					}
				} else if ("".equals(cityType3)) {
					questionBody += cityType2 + "의 날씨는";
				} else {
					questionBody += cityType2 + "의 " + cityType3 + "의 날씨는";
				}
			} else {
				if ("".equals(cityType2)) {
					if ("".equals(cityType3)) {
						dataYn = false;
					} else {
						questionBody = cityType3 + "의 날씨는";
					}
				} else if ("".equals(cityType3)) {
					questionBody = cityType2 + "의 날씨는";
				} else {
					questionBody = cityType2 + "의 " + cityType3 + "의 날씨는";
				}
			}

			if (dataYn) {
				String weatherAddress = "추가적인 정보는 <a href='" + weatherBody + "' target='_blank'>&lt;여기&gt;</a>서 확인하세요";
				String iframeBody = "<div style='position:relative'><a href='" + weatherBody
						+ "' target='_blank'><div style='position:absolute; width:270px; height:100px'></div></a><iframe style=\"background-color:snow;\"  name=\"lunchWrap\" frameborder=\"0\"  scrolling=\"no\"  onload=\"if(!this.loaded){(function(node, frame){node.width = 270;node.height = 100;node.loaded = true;"
						+ "frame.document.write('<html><body style=margin:0;><iframe style=\\\'position:absolute; top:-260;left:-190\\\' src=\\\'"
						+ weatherBody
						+ "\\\' width=\\\'1000px\\\' height=\\\'500px\\\' frameborder=\\\'0\\\' scrolling=\\\'no\\\'></iframe></body></html>');"
						+ "})(this, frames[this.name])};\"></iframe></div>";

				customContext.put("cityType1", cityType1);
				customContext.put("cityType2", cityType2);
				if (!"".equals(cityType3))
					customContext.put("cityType3", cityType3);

				customContext.put("finalBody", "<div>" + questionBody + iframeBody + weatherAddress + "</div>");
				customContext.put("weatherEntityYn", "Y");
			} else {
				String emptyEntity = "N";
				if ((conv.getCustomContext("emptyEntity") != null)
						&& !("".equals(conv.getCustomContext("emptyEntity")))) {
					emptyEntity = (String) conv.getCustomContext("emptyEntity");
				}
				customContext.put("weatherEntityYn", "N");
				customContext.put("emptyEntity", emptyEntity);
			}
		} else {
			String emptyEntity = "N";
			if ((conv.getCustomContext("emptyEntity") != null)
					&& !("".equals(conv.getCustomContext("emptyEntity")))) {
				emptyEntity = (String)conv.getCustomContext("emptyEntity");
			}
			customContext.put("weatherEntityYn", "N");
			customContext.put("emptyEntity", emptyEntity);
		}
		
		conv.setCustomContext(customContext);
	}
}